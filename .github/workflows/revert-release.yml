name: Publish Existing Tag

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Enter the existing tag version to publish (e.g., v1.0.0)'
        required: true

jobs:
  publish-existing-tag:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Fetch All Tags
      - name: Fetch Tags
        run: git fetch --tags

      # Step 3: Verify Specified Tag Exists
      - name: Verify Tag Exists
        run: |
          if ! git rev-parse ${{ github.event.inputs.tag_name }} >/dev/null 2>&1; then
            echo "Error: Specified tag does not exist."
            exit 1
          fi
        shell: bash

      # Step 4: Publish Existing Tag as a Release
      - name: Publish Existing Tag as Release
        uses: actions/github-script@v6
        with:
          script: |
            const tagName = "${{ github.event.inputs.tag_name }}";

            // Fetch all releases
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            // Find the release associated with the tag
            const existingRelease = releases.data.find(release => release.tag_name === tagName);

            if (!existingRelease) {
              throw new Error(`No release found for tag: ${tagName}`);
            }

            if (!existingRelease.draft) {
              console.log(`The release for tag ${tagName} is already published.`);
            } else {
              // Update the release to publish it
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: existingRelease.id,
                draft: false,
                prerelease: false,
                body: `This release was created for the existing tag ${tagName}.`,
              });
              console.log(`Published release for tag: ${tagName}`);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Install Dependencies and Build
      - name: Build the Project
        run: |
          npm install
          npm run build

      # Step 6: Deploy to CDN
      - name: Deploy to CDN
        env:
          CDN_API_KEY: ${{ secrets.CDN_API_KEY }}
        run: |
          # Replace this with your CDN deployment script
          deploy_to_cdn ./build
          echo "Deployed version ${{ github.event.inputs.tag_name }} to the live CDN path."
