name: Increment, Publish, and Deploy

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Override version type (major, minor, patch)'
        required: false
        default: '' # Empty means automatic detection

  # Scheduled triggers
  schedule:
    - cron: '30 7 * * 1-5' # 1 PM IST (7:30 AM UTC) every weekday
    - cron: '30 14 * * 1-5' # 8 PM IST (2:30 PM UTC) every weekday

jobs:
  increment-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch Latest Tags
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Check for New Commits
        run: |
          latest_commit=$(git rev-parse HEAD)
          tag_commit=$(git rev-list -n 1 ${{ env.latest_tag }})
          if [ "$latest_commit" = "$tag_commit" ]; then
            echo "No new commits since the last tag (${env.latest_tag}). Exiting workflow."
            exit 0
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect Merges and Determine Version Bump
        id: detect_merge
        run: |
          chmod +x .github/scripts/detect_version_bump.sh
          version_type=$(.github/scripts/detect_version_bump.sh ${{ env.latest_tag }})
          echo "version_type=$version_type" >> $GITHUB_ENV
          echo "Detected version type: $version_type"

      - name: Increment Version
        id: new_version
        run: |
          latest_tag="${{ env.latest_tag }}"
          latest_tag=${latest_tag#v} # Remove 'v' prefix if it exists
          IFS='.' read -r major minor patch <<< "$latest_tag"
          version_type=${{ github.event.inputs.version_type || env.version_type }}
          if [ "$version_type" == "major" ]; then
            major=$((major+1))
            minor=0
            patch=0
          elif [ "$version_type" == "minor" ]; then
            minor=$((minor+1))
            patch=0
          else
            patch=$((patch+1))
          fi
          new_version="v$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "Next version: $new_version"

      - name: Create and Push Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}
          echo "Published tag: ${{ env.new_version }}"

      - name: Draft Release Notes
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch Draft Release Notes
        id: fetch_release_notes
        uses: actions/github-script@v6
        with:
          script: |
            const releases = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // Ensure there is at least one release
            if (releases.data.length === 0) {
              core.setOutput('release_notes', "No release notes available.");
            } else {
              const latestRelease = releases.data.find(release => release.draft);
              if (!latestRelease) {
                core.setOutput('release_notes', "No draft release found.");
              } else {
                core.setOutput('release_notes', latestRelease.body || "No release notes available.");
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.new_version }}
          release_name: "Release ${{ env.new_version }}"
          body: ${{ steps.fetch_release_notes.outputs.release_notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Dependencies and Build
        run: |
          npm install
          npm run build
        env:
          NODE_ENV: production

      - name: Deploy to CDN
        run: |
          echo "Deployed version ${{ env.new_version }} to the CDN."

      - name: Output New Version
        run: echo "Successfully deployed version ${{ env.new_version }} to the CDN."
